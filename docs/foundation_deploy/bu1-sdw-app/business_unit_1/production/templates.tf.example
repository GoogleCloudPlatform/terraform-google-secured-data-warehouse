/**
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

locals {
  docker_repository_id                       = "flex-templates"
  python_repository_id                       = "python-modules"
  pip_index_url                              = "https://${local.location}-python.pkg.dev/${local.dataflow_template_project_id}/${local.python_repository_id}/simple/"
  python_de_identify_flex_template_image_tag = "${local.location}-docker.pkg.dev/${local.dataflow_template_project_id}/${local.docker_repository_id}/samples/regional-python-dlp-flex:latest"
  python_de_identify_template_gs_path        = "gs://${local.templates_bucket_name}/flex-template-samples/regional-python-dlp-flex.json"

  python_re_identify_flex_template_image_tag = "${local.location}-docker.pkg.dev/${local.dataflow_template_project_id}/${local.docker_repository_id}/samples/regional_bq_dlp_bq_flex:latest"
  python_re_identify_template_gs_path        = "gs://${local.templates_bucket_name}/flex-template-samples/regional_bq_dlp_bq_flex.json"

  templates_path = "${path.module}/../../flex-templates"
}

# The name of this bucket is the name of the bucket that
# Cloud Build creates to host the source code if one is
# not provided with the flag `--gcs-source-staging-dir`.
# Creating the bucket beforehand is necessary because it
# is not possible to pass a `--gcs-source-staging-dir`
# flag to the gcloud dataflow flex-template build command
# used in the cloudbuild.yaml file.
resource "google_storage_bucket" "cloudbuild_bucket" {
  name     = "${local.dataflow_template_project_id}_cloudbuild"
  location = local.location
  project  = local.dataflow_template_project_id

  force_destroy               = true
  uniform_bucket_level_access = true
}

# This null_resource triggers the build of the
# Python DLP De-Identification template image
# to be used by De-Identification Dataflow
resource "null_resource" "python_de_identification_flex_template" {

  triggers = {
    dataflow_template_project_id = local.dataflow_template_project_id
    terraform_service_account    = local.sdw_app_infra_sa
    template_image_tag           = local.python_de_identify_flex_template_image_tag
    template_gs_path             = local.python_de_identify_template_gs_path
  }

  provisioner "local-exec" {
    when    = create
    command = <<EOF
      gcloud builds submit \
       --project=${local.dataflow_template_project_id} \
       --gcs-source-staging-dir="gs://${google_storage_bucket.cloudbuild_bucket.name}/source" \
       --config ${local.templates_path}/python/regional_dlp_de_identification/cloudbuild.yaml \
       ${local.templates_path}/python/regional_dlp_de_identification \
       --impersonate-service-account=${local.sdw_app_infra_sa} \
       --substitutions="_PROJECT=${local.dataflow_template_project_id},_FLEX_TEMPLATE_IMAGE_TAG=${local.python_de_identify_flex_template_image_tag},_PIP_INDEX_URL=${local.pip_index_url},_TEMPLATE_GS_PATH=${local.python_de_identify_template_gs_path}"
EOF

  }

  depends_on = [
    null_resource.upload_modules
  ]
}

# This null_resource triggers the build of the
# Python DLP Transform template image
# to be used by the Re-Identification Dataflow
resource "null_resource" "python_re_identification_flex_template" {

  triggers = {
    dataflow_template_project_id = local.dataflow_template_project_id
    terraform_service_account    = local.sdw_app_infra_sa
    template_image_tag           = local.python_re_identify_flex_template_image_tag
    template_gs_path             = local.python_re_identify_template_gs_path
  }

  provisioner "local-exec" {
    when    = create
    command = <<EOF
      gcloud builds submit \
       --project=${local.dataflow_template_project_id} \
       --gcs-source-staging-dir="gs://${google_storage_bucket.cloudbuild_bucket.name}/source" \
       --config ${local.templates_path}/python/regional_dlp_transform/cloudbuild.yaml \
       ${local.templates_path}/python/regional_dlp_transform \
       --impersonate-service-account=${local.sdw_app_infra_sa} \
       --substitutions="_PROJECT=${local.dataflow_template_project_id},_FLEX_TEMPLATE_IMAGE_TAG=${local.python_re_identify_flex_template_image_tag},_PIP_INDEX_URL=${local.pip_index_url},_TEMPLATE_GS_PATH=${local.python_re_identify_template_gs_path}"
EOF

  }

  depends_on = [
    null_resource.upload_modules
  ]
}

# This null_resource triggers the build of the
# Python modules dependencies image to be used by the templates
# instead of download public dependencies.
resource "null_resource" "upload_modules" {

  triggers = {
    dataflow_template_project_id = local.dataflow_template_project_id
    repository_id                = local.python_repository_id
    location                     = local.location
    terraform_service_account    = local.sdw_app_infra_sa
  }

  provisioner "local-exec" {
    when    = create
    command = <<EOF
     gcloud builds submit \
     --project=${local.dataflow_template_project_id} \
     --gcs-source-staging-dir="gs://${google_storage_bucket.cloudbuild_bucket.name}/source" \
     --config ${local.templates_path}/python/modules/cloudbuild.yaml \
     ${local.templates_path}/python/modules \
     --impersonate-service-account=${local.sdw_app_infra_sa} \
     --substitutions=_REPOSITORY_ID=${local.python_repository_id},_DEFAULT_REGION=${local.location}
EOF

  }
}
